#!/usr/bin/env bash
#########################################################################################
# Shows differences in commits between two branches (as incoming and outgoing changes)
#########################################################################################
# Usage: git divergence branch1 branch2
# if no branch is given, the current local and it's remote counterpart on the origin are compared.
# if only one branch is given, it's compared to the current local branch.
#########################################################################################
set -e

(
  # return the current branch name.
  function currentBranch() {
    git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||'
  }

  # exit this script if reference is not valid
  function ensure_valid_ref() {
    ref=$1
    (
      set +e
      git show-ref $ref > /dev/null
      if [[ $? == 1 ]]; then
        echo "$0: bad ref: $ref"
        exit 1
      fi
    )
  }

  # print information about the revision
  function show_rev() {
    rev=${1}
    git log -1 $rev --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    echo
  }

  #run script
  echo "fetching branches"
  git fetch
  echo "done."
  echo

  if [[ $# == 2 ]]; then
    LOCAL=${1}
    REMOTE=${2}
  elif [[ $# == 1 ]]; then
    LOCAL=`currentBranch`
    REMOTE=${1}
  else
    LOCAL=`currentBranch`
    REMOTE=origin/${LOCAL}
  fi

  echo "changes from ${LOCAL} to ${REMOTE}:"
  echo

  ensure_valid_ref ${LOCAL}
  ensure_valid_ref ${REMOTE}

  echo "incoming (on ${REMOTE} but not on ${LOCAL}):"
  echo
  for rev in `git rev-list ${LOCAL}..${REMOTE}`; do
    show_rev ${rev}
  done

  echo
  echo "outgoing (on ${LOCAL} but not on ${REMOTE}):"
  echo
  for rev in `git rev-list ${REMOTE}..${LOCAL}`; do
    show_rev ${rev}
  done
) | less -r
